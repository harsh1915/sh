Practical 2(by defult)/3(enviroment ma injected WEb3)

file nu name : Greeter.sol

pragma solidity >=0.4.0;

contract greeter
{
    string public yourName;
    function greeter() public
    {
        yourName="world";
    }
    function set(string name) public
    {
        yourName = name;
    }
    function hello() constant public returns (string){
    return yourName;
    }
}

practical 4:

Download the Linux binary from dist.ipfs.io (opens new window).

wget https://dist.ipfs.io/go-ipfs/v0.10.0/go-ipfs_v0.10.0_linux-amd64.tar.gz

error ave to
--no-check-certificate

wget --no-check-certificate https://dist.ipfs.io/go-ipfs/v0.10.0/go-ipfs_v0.10.0_linux-amd64.tar.gz

Unzip the file:

tar -xvzf go-ipfs_v0.10.0_linux-amd64.tar.gz

> x go-ipfs/install.sh
> x go-ipfs/ipfs
> x go-ipfs/LICENSE
> x go-ipfs/LICENSE-APACHE
> x go-ipfs/LICENSE-MIT
> x go-ipfs/README.md
Move into the go-ipfs folder and run the install script:

cd go-ipfs
sudo bash install.sh

> Moved ./ipfs to /usr/local/bin
Test that IPFS has installed correctly:

ipfs --version

> ipfs version 0.10.0


8.>>ipfs init
9.>> cd ..(ipfs mathi bahar nikdva mate )
10. >>ls
11. >> cd Desktop (desktop ma javanu )
12.>>ipfs add minaxi(file name) (cmd ma)(file add thase )
13.>>ipfs cat QmbFMke1KXqnYyBBWxB74N4c5SBnJMVAiMNRcGu6x1AwQH(file id )

practical:5

 file nu name: SimpleStorage.sol
  
// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.6.0 ;


contract SimpleStorage {
    
    uint256 public favoriteNumber = 5;
    
    //comment mate use thy 
    
  
     struct People {
       
       
       uint256 favoriteNumber;
       string name;
   }
    
   // People public person = People({favoriteNumber:2,name:"minaxi"});
    
    People[] public people;
    
    
   // mapping(string => uint256)public nameToFavoriteNamber;

    
    function store(uint256 _favoriteNumber)public{
          
        favoriteNumber=_favoriteNumber;
          
    }
    

    function retrieve() public view returns(uint256){
          
        return favoriteNumber;
    }
    
  
    function addPersion (string memory _name, uint256 _favoriteNumber) public 
    {
            people.push(People(_favoriteNumber,_name));
            
            //nameToFavoriteNamber[_name] = _favoriteNumber;
    }
}



practical 6:

file nu name : StorageFactory.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

import "./SimpleStorage.sol";

contract StorageFactory
{
    SimpleStorage[] public simpleStorageArray;
   
    function createSimpleStorageContract() public
    {
        SimpleStorage simpleStorage = new SimpleStorage();
       
        simpleStorageArray.push(simpleStorage);
    }
   
    function sfStore(uint256 _simpleStorageIndex, uint256 _simpleStorageNumber) public
    {
        // Address
        // ABI[Application Binary interface]
       
        SimpleStorage simpleStorage = SimpleStorage(address(simpleStorageArray[_simpleStorageIndex]));
        simpleStorage.store(_simpleStorageNumber);
    }
   
    function sfGet(uint256 _simpleStorageIndex) public view returns (uint256)
    {
        SimpleStorage simpleStorage = SimpleStorage(address(simpleStorageArray[_simpleStorageIndex]));
        return simpleStorage.retrieve();
    }
}


Practical 7:

file name :Fundme.sol

// SPDX-License-Identifier: MIT 

pragma solidity ^0.6.0 <0.9.0;

import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
import "@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol";



contract FundMe
{

    using SafeMathChainlink for uint256;
    mapping(address => uint256) public addressToAmountFunded;
    address[] public funders;
    address public owner;

    constructor() public
    {
        owner = msg.sender;
    }

    function fund() public payable
    {
        // $50
        uint256 mimimumUSD = 50 * 10 ** 18;
        //1gwei < $50
        require(getConversionRate(msg.value) >= mimimumUSD, "You need to spend more ETH!");
        addressToAmountFunded[msg.sender] += msg.value;
        // what the ETH -> USD conversion rate 
        funders .push(msg.sender);
    }
    
    function getVersion() public view returns (uint256)
    {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);
        return priceFeed.version();
    }

     function getPrice() public view returns(uint256)
    {
         AggregatorV3Interface priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);
         
       ( ,int256 answer,,,) = priceFeed.latestRoundData();
       return uint256(answer * 10000000000);
       
        
    }
    
    function getConversionRate(uint256 ethAmount) public view returns (uint256)
    {
        uint256 ethPrice = getPrice();
        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;
        
        return ethAmountInUsd;
    }

    modifier onlyOwner
    {
         require(msg.sender == owner);
         _;
    }

    function withdraw() payable onlyOwner public
    {
        // only want the contarct admin/owner
       
        msg.sender.transfer(address(this).balance);
        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++)
        {
            address funder = funders[funderIndex];
            addressToAmountFunded[funder] = 0;
        }
        funders = new address[](0);
    }
}

practical 8:

file nu name: SimpleStorage.sol
  
// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.6.0 ;


contract SimpleStorage {
    
    uint256 public favoriteNumber = 5;
    
    //comment mate use thy 
    
  
     struct People {
       
       
       uint256 favoriteNumber;
       string name;
   }
    
   // People public person = People({favoriteNumber:2,name:"minaxi"});
    
    People[] public people;
    
    
   // mapping(string => uint256)public nameToFavoriteNamber;

    
    function store(uint256 _favoriteNumber)public{
          
        favoriteNumber=_favoriteNumber;
          
    }
    

    function retrieve() public view returns(uint256){
          
        return favoriteNumber;
    }
    
  
    function addPersion (string memory _name, uint256 _favoriteNumber) public 
    {
            people.push(People(_favoriteNumber,_name));
            
            //nameToFavoriteNamber[_name] = _favoriteNumber;
    }
}

file name:deploy.py (vs code)

from solcx import compile_standard, install_solc
import json


with open("./SimpleStorage.sol", "r") as file:
    simple_storage_file = file.read()
print(simple_storage_file)



install_solc("0.8.9")
compiled_sol = compile_standard(
    {
        "language": "Solidity",
        "sources": {"SimpleStorage.sol": {"content": simple_storage_file}},
        "settings": {
            "outputSelection": {
                "*": {"*": ["abi", "metadata", "evm.bytecode", "evm.sourceMap"]}
            }
        },
    },
    solc_version="0.8.9",
)

print(compiled_sol)

add library:
python
solidity
pip install py_sol_x
pip install black
 jova mate . black in terminal
